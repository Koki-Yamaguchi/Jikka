%{
open Syntax
%}

%start start

%token LPAREN RPAREN
%token LBRACKET RBRACKET
%token LBRACE RBRACE
%token BACKSLASH DOT
%token COLON
%token EQUAL
%token TO IMPLY

%token ADD SUB MUL DIV MOD
%token LT LE EQ NE GE GT

%token FORALL EXISTS
%token GIVEN ASSUME COMPUTE

%token <string> IDENT
%token <int> INT

%token INDENT DEDENT
%token EOF

%type <Program> start

%%

start: program EOF { $1 }
program: environment compute { { environment = $1; compute = $2; } }

environment:
    | assumption environment { $1 :: $2 }
    | { [] }
assumption:
    | ident EQUAL expr { Define ($1, $3) }
    | GIVEN ident COLON type_ { Given ($2, $4) }
    | ASSUME expr { Assume $2 }
compute: COMPUTE expr { $2 }

type_:
    | ident { IdentTy $1 }
    | LPAREN type_ RPAREN { $2 }

expr:
    | ident { IdentExp $1 }
    | INT { IntExp $1 }
    | LPAREN expr RPAREN { $2 }
ident: IDENT { Ident $1 }
