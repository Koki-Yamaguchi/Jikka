%{
open Syntax
%}

%start start

%token LPAREN RPAREN
%token LBRACKET RBRACKET
%token LBRACE RBRACE
%token BACKSLASH DOT
%token COLON
%token EQUAL
%token UNDERSCORE
%token TO IMPLY

%token ADD SUB MUL DIV MOD
%token LT LE EQ NE GE GT
%token LAND LOR LNOT LIMPLIES LIFF

%token FORALL EXISTS
%token GIVEN ASSUME COMPUTE

%token <string> IDENT
%token <int> INT

%token NEWLINE
%token EOF

%type <Program> start

%%

start:
    newlines program EOF { $2 }
program:
    assumption_statement_list compute_statement { { environment = $1; compute = $2; } }

newlines:
    | NEWLINE newlines {}
    | {}

assumption_statement_list:
    | assumption_statement assumption_statement_list { $1 :: $2 }
    | { [] }

assumption_statement:
    | ident parameters EQUAL expr NEWLINE newlines { Define ($1, $2, $4) }
    | ident COLON type_ NEWLINE newlines { Declare ($1, $3) }
    | GIVEN ident COLON type_ NEWLINE newlines { Given ($2, $4) }
    | ASSUME expr NEWLINE newlines { Assume $2 }

parameters:
    | ident parameters { Some $1 :: $2 }
    | UNDERSCORE parameters { None :: $2 }
    | { [] }

compute_statement:
    COMPUTE expr NEWLINE newlines { $2 }

type_:
    | bare_type TO type_ { FunTy ($1, $3) }
    | bare_type { $1 }
bare_type:
    | bare_type atomic_type { AppTy ($1, $2) }
    | atomic_type { $1 }
atomic_type:
    | ident { ExprTy (IdentExp $1) }
    | LPAREN expr RPAREN { ExprTy $2 }
    | LPAREN type_ RPAREN { $2 }

expr:
    | lambda_expr { $1 }
    | funapp_expr lambda_expr { AppExp ($1, $2) }
    | iff_expr { $1 }
lambda_expr:
    | BACKSLASH ident DOT expr { LamExp ($2, $4) }
    | FORALL ident DOT expr { AppExp (identExp "forall", LamExp ($2, $4)) }
    | EXISTS ident DOT expr { AppExp (identExp "exists", LamExp ($2, $4)) }
iff_expr:
    | imply_expr LIFF lambda_expr { appExp2 (identExp "iff") $1 $3 }
    | imply_expr LIFF imply_expr { appExp2 (identExp "iff") $1 $3 }
    | imply_expr { $1 }
imply_expr:
    | or_expr LIMPLIES lambda_expr { appExp2 (identExp "implies") $1 $3 }
    | or_expr LIMPLIES imply_expr { appExp2 (identExp "implies") $1 $3 }
    | or_expr { $1 }
or_expr:
    | or_expr LOR and_expr { appExp2 (identExp "or") $1 $3 }
    | and_expr { $1 }
and_expr:
    | and_expr LAND not_expr { appExp2 (identExp "and") $1 $3 }
    | not_expr { $1 }
not_expr:
    | LNOT not_expr { AppExp (identExp "or", $2) }
    | compare_expr { $1 }
compare_expr:
    | add_expr LT add_expr { appExp2 (identExp "<") $1 $3 }
    | add_expr LE add_expr { appExp2 (identExp "<=") $1 $3 }
    | add_expr EQ add_expr { appExp2 (identExp "==") $1 $3 }
    | add_expr NE add_expr { appExp2 (identExp "/=") $1 $3 }
    | add_expr GE add_expr { appExp2 (identExp ">=") $1 $3 }
    | add_expr GT add_expr { appExp2 (identExp ">") $1 $3 }
    | add_expr { $1 }
add_expr:
    | add_expr ADD mult_expr { appExp2 (identExp "+") $1 $3 }
    | add_expr SUB mult_expr { appExp2 (identExp "-") $1 $3 }
    | mult_expr { $1 }
mult_expr:
    | mult_expr MUL funapp_expr { appExp2 (identExp "*") $1 $3 }
    | mult_expr DIV funapp_expr { appExp2 (identExp "/") $1 $3 }
    | mult_expr MOD funapp_expr { appExp2 (identExp "%") $1 $3 }
    | funapp_expr { $1 }
funapp_expr:
    | funapp_expr atomic_expr { AppExp ($1, $2) }
    | atomic_expr { $1 }
atomic_expr:
    | ident { IdentExp $1 }
    | INT { IntExp $1 }
    | LPAREN expr RPAREN { $2 }

ident: IDENT { Ident $1 }
