%{
open System.Numerics
open Semantics
open Syntax

let varPExp s = VarPExp(ValName s)
let appPExp2 f x y = AppPExp(AppPExp(f, x), y)
%}

%start start

%token LPAREN
%token RPAREN
%token LBRACKET
%token RBRACKET
%token LBRACE
%token RBRACE

%token LET
%token REC
%token EQUAL
%token IN
%token MATCH
%token WITH
%token END
%token BAR
%token TO
%token IMPLIES
%token UNDERSCORE
%token SEMICOLON
%token COLON
%token COMMA
%token FUNCTION
%token FUN
%token IF
%token THEN
%token ELSE

%token GIVEN
%token SOLVE

%token ADD
%token SUB
%token MUL
%token DIV
%token MOD
%token POW
%token LT
%token LE
%token EQ
%token NE
%token GE
%token GT
%token LNOT
%token LAND
%token LOR

%token <string> IDENT
%token ZAHL
%token NAT
%token <BigInteger> POSITIVE
%token <BigInteger> ZERO
%token <BigInteger> NEGATIVE
%token BOOL
%token <bool> TRUE
%token <bool> FALSE

%token EOF

%type <Program> start

%%

start:
    program EOF { $1 }
program:
    toplevel v_expr { { toplevel = $1; expr = $2; } }

toplevel:
    | declare toplevel { $1 :: $2 }
    | { [] }

declare:
    | LET v_name parameters optional_type_restriction EQUAL v_expr IN { Let($2, $3, $4, $6) }
    | LET REC v_name optional_type_restriction match_patterns IN { LetRec($3, $4, $5) }
    | LET GIVEN v_name parameters COLON t_expr IN { LetGiven($3, $4, $6) }

parameters:
    | parameter parameters { $1 :: $2 }
    | { [] }

parameter:
    | optional_v_name { Param($1, None) }
    | LPAREN optional_v_name COLON t_expr RPAREN { Param($2, Some $4) }

optional_v_name:
    | UNDERSCORE { None }
    | v_name { Some $1 }

optional_type_restriction:
    | COLON t_expr { Some $2 }
    | { None }

match_patterns:
    | match_pattern match_patterns { $1 :: $2 }
    | { [] }
match_pattern:
    | BAR value_patterns IMPLIES v_expr { ($2, $4) }

value_patterns:
    | value_pattern value_patterns { $1 :: $2 }
    | { [] }

value_pattern:
    | optional_v_name { VarPat($1, None) }
    | ZERO { IntPat($1, None) }
    | POSITIVE { IntPat($1, None) }
    | LPAREN optional_v_name COLON t_expr RPAREN { VarPat($2, Some $4) }
    | LPAREN ZERO COLON t_expr RPAREN { IntPat($2, Some $4) }
    | LPAREN POSITIVE COLON t_expr RPAREN { IntPat($2, Some $4) }
    | LPAREN optional_v_name ADD POSITIVE optional_type_restriction RPAREN { PlusKPat($2, $4, $5) }

t_expr:
    | t_atomic TO t_expr { FunPTy($1, $3) }
    | t_atomic { $1 }
t_atomic:
    | LPAREN t_atomic TO t_expr RPAREN { FunPTy($2, $4) }
    | ZAHL { ZahlPTy }
    | NAT { NatPTy }
    | BOOL { BoolPTy }
    | atomic_int_expr { FinitePTy $1 }
    | LPAREN simple_int_expr RPAREN { FinitePTy $2 }

atomic_int_expr:
    | integer { ConstIExp $1 }
    | v_name { VarIExp $1 }
simple_int_expr:
    | v_name ADD integer { AddIExp($1, $3) }
    | integer MUL v_name { MulIExp($1, $3) }
    | integer MUL v_name ADD integer { MulAddIExp($1, $3, $5) }

v_expr:
    | FUN optional_v_name TO v_expr { LamPExp($2, None, $4) }
    | FUN optional_v_name COLON t_atomic TO v_expr { LamPExp($2, Some $4, $6) }
    | FUN LPAREN optional_v_name optional_type_restriction RPAREN TO v_expr { LamPExp($3, $4, $7) }
    | IF v_expr THEN v_expr ELSE v_expr { IfThenElsePExp($2, $4, $6) }
    | or_expr { $1 }
or_expr:
    | or_expr LOR and_expr { appPExp2(varPExp "or") $1 $3 }
    | and_expr { $1 }
and_expr:
    | and_expr LAND not_expr { appPExp2(varPExp "and") $1 $3 }
    | not_expr { $1 }
not_expr:
    | LNOT not_expr { AppPExp(varPExp "or", $2) }
    | compare_expr { $1 }
compare_expr:
    | add_expr LT add_expr { appPExp2(varPExp "<") $1 $3 }
    | add_expr LE add_expr { appPExp2(varPExp "<=") $1 $3 }
    | add_expr EQ add_expr { appPExp2(varPExp "==") $1 $3 }
    | add_expr NE add_expr { appPExp2(varPExp "/=") $1 $3 }
    | add_expr GE add_expr { appPExp2(varPExp ">=") $1 $3 }
    | add_expr GT add_expr { appPExp2(varPExp ">") $1 $3 }
    | add_expr { $1 }
add_expr:
    | add_expr ADD mult_expr { appPExp2(varPExp "+") $1 $3 }
    | add_expr SUB mult_expr { appPExp2(varPExp "-") $1 $3 }
    | mult_expr { $1 }
mult_expr:
    | mult_expr MUL pow_expr { appPExp2(varPExp "*") $1 $3 }
    | mult_expr DIV pow_expr { appPExp2(varPExp "/") $1 $3 }
    | mult_expr MOD pow_expr { appPExp2(varPExp "%") $1 $3 }
    | SUB pow_expr { AppPExp(varPExp "negate", $2) }
    | pow_expr { $1 }
pow_expr:
    | funapp_expr POW pow_expr { appPExp2(varPExp "**") $1 $3 }
    | funapp_expr { $1 }
funapp_expr:
    | funapp_expr atomic_expr { AppPExp($1, $2) }
    | atomic_expr { $1 }
atomic_expr:
    | v_name { VarPExp $1 }
    | LPAREN v_expr RPAREN { $2 }
    | integer { IntPExp $1 }
    | boolean { BoolPExp $1 }

natural:
    | POSITIVE { $1 }
    | ZERO { $1 }
integer:
    | POSITIVE { $1 }
    | ZERO { $1 }
    | NEGATIVE { $1 }
boolean:
    | TRUE { $1 }
    | FALSE { $1 }

v_name: IDENT { ValName $1 }
t_name: IDENT { TyName $1 }
