{

open System
open System.Numerics
open FSharp.Text.Lexing
open Parser

let lexeme = LexBuffer<_>.LexemeString

}

let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let upper = ['A' - 'Z']
let lower = ['a' - 'z']
let digit = ['0' - '9']
let alpha = upper | lower
let alnum = digit | upper | lower

rule tokenstream = parse
    | '('               { LPAREN }
    | ')'               { RPAREN }
    | '['               { LBRACKET }
    | ']'               { RBRACKET }
    | '{'               { LBRACE }
    | '}'               { RBRACE }
    | '\\'              { BACKSLASH }
    | '.'               { DOT }
    | ':'               { COLON }
    | '='               { EQUAL }
    | '_'               { UNDERSCORE }
    | "->"              { TO }
    | "=>"              { IMPLY }

    | '+'               { ADD }
    | '-'               { SUB }
    | '*'               { MUL }
    | '/'               { DIV }
    | '%'               { MOD }
    | "(+)"             { IDENT "+" }
    | "(-)"             { IDENT "-" }
    | "(*)"             { IDENT "*" }
    | "(/)"             { IDENT "/" }
    | "(%)"             { IDENT "%" }

    | '<'               { LT }
    | "<="              { LE }
    | "=="              { EQ }
    | "/="              { NE }
    | ">="              { GE }
    | '>'               { GT }

    | "and"             { LAND }
    | "or"              { LOR }
    | "not"             { LNOT }
    | "implies"         { LIMPLIES }
    | "iff"             { LIFF }
    | "forall"          { FORALL }
    | "exists"          { EXISTS }
    | "given"           { GIVEN }
    | "assume"          { ASSUME }
    | "compute"         { COMPUTE }

    | alpha (alnum *)   { IDENT (lexeme lexbuf) }
    | digit +           { INT (BigInteger.Parse (lexeme lexbuf)) }

    | '\\' newline      { tokenstream lexbuf }
    | '#' [^ '\n'] *    { tokenstream lexbuf }
    | whitespace        { tokenstream lexbuf }
    | newline           { NEWLINE }
    | eof               { EOF }
    | _                 { raise (Exception (sprintf "LexerError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line + 1) lexbuf.StartPos.Column)) }

