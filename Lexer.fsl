{

open System
open System.Numerics
open FSharp.Text.Lexing
open Parser

let lexeme = LexBuffer<_>.LexemeString
let newline (lexbuf : LexBuffer<_>) =
    lexbuf.EndPos <- lexbuf.EndPos.NextLine

}

let whitespace = [' ' '\t']
let newline = ('\n' | '\r' '\n')
let upper = ['A' - 'Z']
let lower = ['a' - 'z']
let digit = ['0' - '9']
let nonzero = ['1' - '9']
let alpha = upper | lower
let alnum = digit | upper | lower

rule tokenstream = parse
    | '('               { LPAREN }
    | ')'               { RPAREN }
    | '['               { LBRACKET }
    | ']'               { RBRACKET }
    | '{'               { LBRACE }
    | '}'               { RBRACE }

    | "let"             { LET }
    | "rec"             { REC }
    | '='               { EQUAL }
    | "in"              { IN }
    | "match"           { MATCH }
    | "with"            { WITH }
    | "end"             { END }
    | '|'               { BAR }
    | "->"              { TO }
    | "=>"              { IMPLIES }
    | '_'               { UNDERSCORE }
    | ';'               { SEMICOLON }
    | ':'               { COLON }
    | ','               { COMMA }
    | "function"        { FUNCTION }
    | "fun"             { FUN }
    | "if"              { IF }
    | "then"            { THEN }
    | "else"            { ELSE }

    | "given"           { GIVEN }
    | "solve"           { SOLVE }

    | '+'               { ADD }
    | '-'               { SUB }
    | '/'               { DIV }
    | '%'               { MOD }
    | "**"              { POW }
    | '*'               { MUL }
    | "(+)"             { IDENT "+" }
    | "(-)"             { IDENT "-" }
    | "(/)"             { IDENT "/" }
    | "(%)"             { IDENT "%" }
    | "(**)"            { IDENT "**" }
    | "(*)"             { IDENT "*" }

    | "<="              { LE }
    | '<'               { LT }
    | "="               { EQ }
    | "<>"              { NE }
    | ">="              { GE }
    | '>'               { GT }
    | "(<=)"            { IDENT "<=" }
    | "(<)"             { IDENT "<" }
    | "(=)"             { IDENT "=" }
    | "(<>)"            { IDENT "<>" }
    | "(>=)"            { IDENT ">=" }
    | "(>)"             { IDENT ">" }

    | '!'               { LNOT }
    | "&&"              { LAND }
    | "||"              { LOR }
    | "(!)"             { IDENT "!" }
    | "(&&)"            { IDENT "&&" }
    | "(||)"            { IDENT "||" }

    | "Zahl"            { ZAHL }
    | "Nat"             { NAT }
    | nonzero digit *   { POSITIVE(BigInteger.Parse(lexeme lexbuf)) }
    | '0'               { ZERO(BigInteger.Parse(lexeme lexbuf)) }
    | '-' nonzero digit * { NEGATIVE(BigInteger.Parse(lexeme lexbuf)) }
    | "Bool"             { BOOL }
    | "true"             { TRUE true }
    | "false"            { FALSE false }

    | alpha (alnum *)   { IDENT(lexeme lexbuf) }
    | '\\' newline      { newline lexbuf ; tokenstream lexbuf }
    | '#' [^ '\n'] *    { tokenstream lexbuf }
    | whitespace        { tokenstream lexbuf }
    | newline           { newline lexbuf ; tokenstream lexbuf }
    | eof               { EOF }
    | _                 { raise (Exception(sprintf "LexerError: Unexpected char: '%s' Line: %d Column: %d" (lexeme lexbuf) (lexbuf.StartPos.Line + 1) (lexbuf.StartPos.Column + 1))) }

